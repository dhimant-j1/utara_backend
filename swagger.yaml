openapi: 3.0.0
info:
  title: Utara Backend API
  description: API for managing rooms, room requests, food passes, and user management
  version: 2.1.0

servers:
  - url: http://localhost:61554
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: objectId
        user_name:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [SUPER_ADMIN, STAFF, USER]
        is_important:
          type: boolean
        phone_number:
          type: string
        user_type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    SignupRequest:
      type: object
      required:
        - email
        - password
        - name
        - phone_number
        - role
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        name:
          type: string
        phone_number:
          type: string
        role:
          type: string
          enum: [SUPER_ADMIN, STAFF, USER]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    UserModuleAccess:
      type: object
      properties:
        id:
          type: string
          format: objectId
        user_id:
          type: string
          format: objectId
        role:
          type: string
        modules:
          type: object
          additionalProperties:
            type: boolean
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    PeopleCount:
      type: object
      properties:
        male:
          type: integer
        female:
          type: integer
        children:
          type: integer
        total:
          type: integer

    Room:
      type: object
      properties:
        id:
          type: string
          format: objectId
        room_number:
          type: string
        floor:
          type: integer
        type:
          type: string
          enum: [SHREEHARIPLUS, SHREEHARI, SARJUPLUS, SARJU, NEELKANTHPLUS, NEELKANTH]
        beds:
          type: array
          items:
            $ref: '#/components/schemas/Bed'
        has_geyser:
          type: boolean
        has_ac:
          type: boolean
        has_sofa_set:
          type: boolean
        sofa_set_quantity:
          type: integer
        extra_amenities:
          type: string
        is_visible:
          type: boolean
        images:
          type: array
          items:
            $ref: '#/components/schemas/RoomImage'
        is_occupied:
          type: boolean
        building:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Bed:
      type: object
      properties:
        type:
          type: string
          enum: [SINGLE, DOUBLE, EXTRA_BED]
        quantity:
          type: integer

    RoomImage:
      type: object
      properties:
        url:
          type: string
        description:
          type: string
        uploaded_at:
          type: string
          format: date-time

    RoomRequest:
      type: object
      properties:
        id:
          type: string
          format: objectId
        user_id:
          type: string
          format: objectId
        name:
          type: string
        place:
          type: string
        purpose:
          type: string
        check_in_date:
          type: string
          format: date-time
        check_out_date:
          type: string
          format: date-time
        number_of_people:
          $ref: '#/components/schemas/PeopleCount'
        special_requests:
          type: string
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
        processed_by:
          type: string
          format: objectId
        processed_at:
          type: string
          format: date-time
        reference:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RoomAssignment:
      type: object
      properties:
        id:
          type: string
          format: objectId
        room_id:
          type: string
          format: objectId
        user_id:
          type: string
          format: objectId
        request_id:
          type: string
          format: objectId
        check_in_date:
          type: string
          format: date-time
        check_out_date:
          type: string
          format: date-time
        assigned_by:
          type: string
          format: objectId
        assigned_at:
          type: string
          format: date-time
        checked_in:
          type: boolean
        checked_in_at:
          type: string
          format: date-time
        checked_out:
          type: boolean
        checked_out_at:
          type: string
          format: date-time

    FoodPass:
      type: object
      properties:
        id:
          type: string
          format: objectId
        user_id:
          type: string
          format: objectId
        member_name:
          type: string
        meal_type:
          type: string
          enum: [BREAKFAST, LUNCH, DINNER]
        date:
          type: string
          format: date-time
        qr_code:
          type: string
        is_used:
          type: boolean
        dining_hall:
          type: string
        color_code:
          type: string
        used_at:
          type: string
          format: date-time
        created_by:
          type: string
          format: objectId
        created_at:
          type: string
          format: date-time

    FoodPassCategory:
      type: object
      properties:
        id:
          type: string
          format: objectId
        building_name:
          type: string
        color_code:
          type: string
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /auth/signup:
    post:
      summary: Register a new user
      description: |
        - Regular users can only create USER accounts
        - SUPER_ADMIN can create any type of account
        - STAFF cannot create new accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user (admin/staff)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/user-login:
    post:
      summary: Login for regular users only
      description: Only allows users with USER role to login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials or not a regular user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /createUser:
    post:
      summary: Create a new user (protected)
      description: Create a new user account (requires authentication)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile:
    get:
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users
      description: Only SUPER_ADMIN and STAFF can access this endpoint
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: integer
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assign-module:
    post:
      summary: Assign modules to user
      description: Only SUPER_ADMIN can assign modules
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - modules
              properties:
                user_id:
                  type: string
                modules:
                  type: object
                  additionalProperties:
                    type: boolean
      responses:
        '200':
          description: Modules assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assign-usertype:
    post:
      summary: Assign user type
      description: Only SUPER_ADMIN can assign user types
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - user_type
              properties:
                user_id:
                  type: string
                user_type:
                  type: string
                  enum: ["Shri Hari+", "Shri Hari", "Sarju+", "Sarju", "Neelkanth+", "Neelkanth"]
      responses:
        '200':
          description: User type updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid user type or user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/update-user/{id}:
    put:
      summary: Update user
      description: Only SUPER_ADMIN can update users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone_number:
                  type: string
                role:
                  type: string
                  enum: [SUPER_ADMIN, STAFF, USER]
                user_type:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/delete-user/{id}:
    delete:
      summary: Delete user
      description: Only SUPER_ADMIN can delete users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rooms:
    post:
      summary: Create a new room
      description: Only SUPER_ADMIN and STAFF can create rooms
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all rooms
      description: |
        - SUPER_ADMIN and STAFF can see all rooms
        - Regular users can only see visible rooms
      security:
        - BearerAuth: []
      parameters:
        - name: floor
          in: query
          schema:
            type: integer
        - name: type
          in: query
          schema:
            type: string
            enum: [SHREEHARIPLUS, SHREEHARI, SARJUPLUS, SARJU, NEELKANTHPLUS, NEELKANTH]
        - name: is_visible
          in: query
          schema:
            type: boolean
        - name: is_occupied
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'

  /rooms/upload-rooms:
    post:
      summary: Upload multiple rooms via CSV
      description: Only SUPER_ADMIN and STAFF can upload rooms
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Rooms uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imported_rooms:
                    type: integer
                  skipped_rows:
                    type: integer
                  skipped_details:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid file or format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete room
      description: Only SUPER_ADMIN and STAFF can delete rooms
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rooms/stats:
    get:
      summary: Get room statistics
      description: Only SUPER_ADMIN and STAFF can access room statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Room statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_rooms:
                    type: integer
                  occupied_rooms:
                    type: integer
                  available_rooms:
                    type: integer
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rooms/{id}:
    get:
      summary: Get room by ID
      description: |
        - SUPER_ADMIN and STAFF can see any room
        - Regular users can only see visible rooms
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update room
      description: Only SUPER_ADMIN and STAFF can update rooms
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete room
      description: Only SUPER_ADMIN and STAFF can delete rooms
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Room deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /room-requests:
    post:
      summary: Create a room request
      description: Any authenticated user can create a room request
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - check_in_date
                - check_out_date
                - number_of_people
                - purpose
                - place
              properties:
                check_in_date:
                  type: string
                  format: date-time
                check_out_date:
                  type: string
                  format: date-time
                number_of_people:
                  $ref: '#/components/schemas/PeopleCount'
                purpose:
                  type: string
                place:
                  type: string
                special_requests:
                  type: string
                reference:
                  type: string
      responses:
        '201':
          description: Room request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomRequest'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get room requests
      description: |
        - SUPER_ADMIN and STAFF can see all requests
        - Regular users can only see their own requests
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED]
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of room requests with details
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/RoomRequest'
                    - type: object
                      properties:
                        user:
                          $ref: '#/components/schemas/User'
                        room:
                          $ref: '#/components/schemas/Room'
                        assignment:
                          $ref: '#/components/schemas/RoomAssignment'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /room-requests/{id}/process:
    put:
      summary: Process a room request
      description: Only SUPER_ADMIN and STAFF can process room requests
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [APPROVED, REJECTED]
                room_id:
                  type: string
                  format: objectId
      responses:
        '200':
          description: Request processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomRequest'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /room-assignments:
    post:
      summary: Assign room to user
      description: Only SUPER_ADMIN and STAFF can assign rooms
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - room_id
                - user_id
                - request_id
                - check_in_date
                - check_out_date
              properties:
                room_id:
                  type: string
                  format: objectId
                user_id:
                  type: string
                  format: objectId
                request_id:
                  type: string
                  format: objectId
                check_in_date:
                  type: string
                  format: date-time
                check_out_date:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Room assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAssignment'
        '400':
          description: Room not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /room-assignments/{id}/check-in:
    put:
      summary: Check in to assigned room
      description: Only SUPER_ADMIN and STAFF can perform check-in
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Check-in successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAssignment'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Assignment not found or already checked in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /room-assignments/{id}/check-out:
    put:
      summary: Check out from assigned room
      description: Only SUPER_ADMIN and STAFF can perform check-out
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Check-out successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAssignment'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Assignment not found, not checked in, or already checked out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/generate:
    post:
      summary: Generate food passes
      description: Only SUPER_ADMIN and STAFF can generate food passes
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_ids
                - meal_type
                - date
                - dining_hall
                - color_code
              properties:
                user_ids:
                  type: array
                  items:
                    type: string
                meal_type:
                  type: string
                  enum: [BREAKFAST, LUNCH, DINNER]
                date:
                  type: string
                  format: date
                dining_hall:
                  type: string
                color_code:
                  type: string
      responses:
        '201':
          description: Food passes generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  passes:
                    type: array
                    items:
                      $ref: '#/components/schemas/FoodPass'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/user/{user_id}:
    get:
      summary: Get user's food passes
      description: |
        - SUPER_ADMIN and STAFF can see any user's passes
        - Regular users can only see their own passes
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: meal_type
          in: query
          schema:
            type: string
            enum: [BREAKFAST, LUNCH, DINNER]
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: is_used
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of food passes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodPass'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/scan:
    post:
      summary: Scan a food pass
      description: Only SUPER_ADMIN and STAFF can scan food passes
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - qr_code
              properties:
                qr_code:
                  type: string
      responses:
        '200':
          description: Food pass scanned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  food_pass:
                    $ref: '#/components/schemas/FoodPass'
        '400':
          description: Invalid QR code or pass already used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Food pass not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/{id}:
    put:
      summary: Update food pass
      description: Only SUPER_ADMIN and STAFF can update food passes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_name:
                  type: string
                meal_type:
                  type: string
                  enum: [BREAKFAST, LUNCH, DINNER]
                date:
                  type: string
                  format: date-time
                is_used:
                  type: boolean
                dining_hall:
                  type: string
                color_code:
                  type: string
                used_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Food pass updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodPass'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Food pass not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/{id}:
    put:
      summary: Update food pass
      description: Only SUPER_ADMIN and STAFF can update food passes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_name:
                  type: string
                meal_type:
                  type: string
                  enum: [BREAKFAST, LUNCH, DINNER]
                date:
                  type: string
                  format: date-time
                dining_hall:
                  type: string
                color_code:
                  type: string
      responses:
        '200':
          description: Food pass updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodPass'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Food pass not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/food-pass-category:
    post:
      summary: Create food pass category
      description: Only SUPER_ADMIN can create food pass categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - building_name
                - color_code
              properties:
                building_name:
                  type: string
                color_code:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  category:
                    $ref: '#/components/schemas/FoodPassCategory'
        '400':
          description: Invalid color code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/get-pass-categories:
    get:
      summary: Get all food pass categories
      description: Only SUPER_ADMIN can view food pass categories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/FoodPassCategory'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/update-pass-category/{id}:
    put:
      summary: Update food pass category
      description: Only SUPER_ADMIN can update food pass categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                building_name:
                  type: string
                color_code:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid color code or no fields to update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food-passes/delete-pass-category/{id}:
    delete:
      summary: Delete food pass category
      description: Only SUPER_ADMIN can delete food pass categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'